파일을 전송해야 하는 form (이미지, 텍스트 등 무관)
- enctype="multipart/form-data" 속성을 추가해야함
--- enctype이란 데이터를 서버로 전송할 때 어떤 인코딩 유형을 쓸 것인지 나타냄
--- 인코딩은 form에 추가한 데이터를 어떤 방식으로 변환시킬 것인지 정하는 규격
--- form 에 별도로 enctype을 지정하지 않는 경우 텍스트 데이터만 보낼 수 있음

--- view에서 POST 메서드로 전달받은 데이터는 request.POST에서 가져옴
--- 전송된 파일은 request.FILES 에서 가져와야함

인증 시스템
- 회원가입, 로그인과 같은 사용자 정보를 활용하는 기능을 통틀어
  인증 시스템(Authentication System)이라고 부름

- CustomUser
--- Django는 기본적으로 로그인을 처리할 수 있는 기본 User 모델을 지원함
----- 기본 User 모델은 ID, 비밀번호, 이름과 같은 최소한의 정보만을 지원
----- 사용자 모델에 추가 정보를 저장하고 싶다면 별도의 User 모델을 구성해야함
----- 별도의 User 모델을 구성하도록 돕는 Django의 기능이 CustomUser

- AbstractUser : Django가 CustomUser 모델을 만들기 위해 제공하는 기본 유저 형태를 가진 모델 클래스
--- AbstractUser를 상속받으면 자동으로 다음 필드들이 모델에 추가됨
----- username : 사용자명, 로그인할 때의 아이디
----- password : 비밀번호
----- first_name : 이름
----- last_name : 성
----- email : 이메일
----- is_staff : 관리자 여부
----- is_active : 활성화 여부
----- date_joined : 가입 일시
----- last_login : 마지막 로그인 일시

- 커스텀 유저 모델을 사용하는 경우, 어떤 모델을 User 모델로 사용하는지 settings.py에 정의해야함

CustomUser에 필드 추가
- CustomUser에 프로필이미지와 소개글 필드를 추가
- CustomUser에 추가한 내용은 Admin 페이지에서 자동으로 보이지 않음. admin.py에 추가해야함

로그인/피드 페이지 기본 구조
- pystagram에 접속하면, 로그인 중이라면 바로 피드 페이지가 나타남
- 로그인되지 않았거나 처음 접속한 경우에는 로그인 페이지로 이동

- 아래 두 가지 조건에 맞도록 view에서 동작을 제어해야 함

--- 이미 사용자가 브라우저에서 로그인을 했다면
----- 피드(새 글 목록) 페이지를 보여줌

--- 사용자가 로그인을 한 적이 없다면(또는 로그아웃을 했다면)
----- 로그인 페이지를 보여줌

page not found(404) 에러
- 페이지를 찾을 수 없다는 에러
- 요청한 URL에 대한 페이지를 찾을 수 없다는 응답 코드
- URL을 해석할 때 매칭되는 패턴을 찾지 못했을 때 발생

현재 정의된 URL들은 다음과 같음
1. "admin/"으로 시작하는 URL -> 관리자 페이지
2. 공백 문자열 -> index View
3. "media"로 시작하는 URL -> 사용자가 업로드한 정적 파일
- 새로 추가한 users/urls.py 에 정의한 URL은 여기에 나타나지 않음
--- 새 urls.py 는 RootURLconf 에 등록해야함

pystagram/urls.py 에서 사용된 include 함수는 users/ 로 시작하는 URL을 users/urls.py에서 처리하게 하며
127.0.0.1:8000/users/login/ URL은 다음의 과정을 거쳐 views에 전달됨

전달 순서

1. pystagram/urls.py
--- /users/로 시작하는 URL을 users/urls.py 로 전달

2. users/urls.py
--- 나머지 login/ 부분을 login_view 로 전달

3. urls에서 전달해준 요청을 view 가 처리


로그인 여부에 따른 접속 제한
- 로그인 여부에 따라 동작을 구분하려면 요청을 보낸 사용자의 정보가 필요함
- View 함수에 전달된 요청(request)에서 사용자 정보는 request.user 속성으로 가져올 수 있음
- 가져온 request.user 가 로그인된 사용자인지 여부는 is_authenticated 속성으로 확인 할 수 있음


LoginForm 인스턴스 생성에 딕셔너리를 전달하면 Form 클래스는 정의된 플드들에 올바른 값이 들어왔는지,
제약 조건을 지킨 데이터가 들어왔는지를 검사
- is_valid() 메서드를 호출할 때 이 검사가 실행되며, 검사 결과를 True/False로 반환
- errors() 메서드를 호출하여 어떤 에러가 발생했는지 확인할 수 있음

- 전달된 데이터를 검증하는 것 외에도, Form 클래스는 Template에서 input 요소를 생성하는 기능도 수행

Form 은 Template에 input 요소들을 생성할 때와 자신에게 전달된 데이터를 검증할 때 사용
- 일반적으로 data가 없이 생성된 Form은 Template에 form 정보를 전달하기 위해 사용
- data 인수를 채운채로 생성된 Form은 해당 data의 유효성을 검증하기 위해 사용

Form.is_valid
- is_valid 메서드를 실행하기 전에는 form의 cleaned_data 에 접근할 수 없음
- Form 클래스를 사용해 데이터를 받았다면 반드시 is_valid 를 호출해야 함